services:
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db
      - mail
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_EMAIL: ${MAIL_EMAIL}

  forums_app:
    build:
      context: ./forums_backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9090:9090"
    depends_on:
      - neo4j
      - elasticsearch
    environment:
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ELASTICSEARCH_HOST: "http://elasticsearch:9200"
    volumes:
      - ./dataProtectionKeys:/root/.aspnet/DataProtection-Keys

  payment_app:
    build:
      context: ./payment_backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9091:9091"
    depends_on:
      - mongo_db
    environment:
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
    volumes:
      - ./dataProtectionKeys1:/root/.aspnet/DataProtection-Keys

  db:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  # TODO: Remove this when not needed
  # mongodb://root:example@localhost:27017/mydb?authSource=admin
  mongo_db:
    container_name: mongo_db
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}

  neo4j:
    container_name: neo4j_db
    image: neo4j:latest
    restart: always
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASSWORD}"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs

  elasticsearch:
    container_name: elasticsearch_db
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=password
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: always

  mail:
    image: mailhog/mailhog
    ports:
      - "${MAIL_PORT}:${MAIL_PORT}" # SMTP
      - "8025:8025" # Web UI

  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent overwriting node_modules
    environment:
      - SERVER_URL=${SERVER_URL}
      - API_URL=${API_URL}
    depends_on:
      - app
      - forums_app

  db_test:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TEST}
      POSTGRES_DB: ${POSTGRES_DB_TEST}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./database/testing_starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"

  tester:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: tester
    depends_on:
      - db_test
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST_TEST}
      POSTGRES_PORT: ${POSTGRES_PORT_TEST}
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_TEST}
      POSTGRES_DB: ${POSTGRES_DB_TEST}

volumes:
  postgres_data:
  postgres_test_data:
  neo4j_data:
  neo4j_logs:
  elasticsearch_data:
  mongo_data: